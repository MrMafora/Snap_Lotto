# Ultra-slim multi-stage Dockerfile for 8GB Cloud Run limit
# Stage 1: Build dependencies
FROM python:3.11-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    gcc \
    musl-dev \
    libffi-dev \
    openssl-dev \
    postgresql-dev

# Set working directory
WORKDIR /app

# Copy and install Python dependencies
COPY requirements-ultra-slim.txt ./requirements.txt
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage 2: Runtime (ultra-minimal)
FROM python:3.11-alpine AS runtime

# Install only runtime dependencies (minimal)
RUN apk add --no-cache \
    postgresql-client \
    libffi \
    openssl \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 lotteryapp && \
    adduser -D -u 1001 -G lotteryapp lotteryapp

# Set working directory
WORKDIR /app

# Copy Python packages from builder
COPY --from=builder /root/.local /home/lotteryapp/.local

# Copy only essential application files
COPY main.py models.py security_utils.py ./
COPY templates/ ./templates/
COPY static/ ./static/

# Set PATH for user packages
ENV PATH=/home/lotteryapp/.local/bin:$PATH
ENV PYTHONPATH=/home/lotteryapp/.local/lib/python3.11/site-packages:$PYTHONPATH

# Set environment variables for production
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    FLASK_ENV=production

# Change ownership and switch to non-root
RUN chown -R lotteryapp:lotteryapp /app
USER lotteryapp

# Expose port
EXPOSE 5000

# Health check (minimal)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=2 \
    CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:5000/health')" || exit 1

# Ultra-slim gunicorn command
CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "1", "--threads", "4", "--timeout", "60", "main:app"]