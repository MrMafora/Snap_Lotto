"""
Main application entry point with Flask application defined for deployment.

This file is imported by gunicorn using the 'main:app' notation.

It also includes functionality to automatically bind to port 8080 
when running directly, to support Replit's external access requirements.

IMPORTANT: This application includes built-in port forwarding capabilities
to handle both the internal port 5000 (used by gunicorn) and the external
port 8080 required by Replit for public access.
"""
import logging
import os
import io
import time
import threading
import traceback
from datetime import datetime, timedelta
from functools import wraps
from flask import abort

# Admin required decorator
def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated or not current_user.is_admin:
            abort(403)
        return f(*args, **kwargs)
    return decorated_function

# Set up logging first
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Now that logger is defined, import other modules
import scheduler  # Import directly at the top level for screenshot functions
import create_template  # Import directly for template creation
from flask import Flask, render_template, flash, redirect, url_for, request, jsonify, send_from_directory, send_file, session
from flask_login import LoginManager, login_user, logout_user, current_user, login_required
from werkzeug.middleware.proxy_fix import ProxyFix
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
# Import EnhancedCSRFProtect instead of CSRFProtect
from csrf_fix import EnhancedCSRFProtect

# Import models only (lightweight)
from models import LotteryResult, ScheduleConfig, Screenshot, User, Advertisement, AdImpression, Campaign, AdVariation, ImportHistory, ImportedRecord, db
from config import Config

# Import modules
import ad_management
import lottery_analysis
import puppeteer_routes
from import_latest_spreadsheet import import_latest_spreadsheet, find_latest_spreadsheet

# Import port proxy only if needed, but don't start it immediately
# We'll let it be started as a separate process
try:
    # Just checking if the module exists
    import auto_start_proxy
    logger.info("Port proxy auto-starter module found")
except Exception as e:
    logger.error(f"Failed to load port proxy auto-starter: {e}")

# Import template handling
try:
    import import_latest_template
    logger.info("Template import module loaded")
except Exception as e:
    logger.error(f"Failed to load template import module: {e}")

# Create the Flask application
app = Flask(__name__)
app.config.from_object(Config)
app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)

# Add custom Jinja2 filters for math functions needed by charts
import math
import locale
locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')  # Set locale for number formatting

app.jinja_env.filters['cos'] = lambda x: math.cos(float(x))
app.jinja_env.filters['sin'] = lambda x: math.sin(float(x))
app.jinja_env.filters['format_number'] = lambda x: f"{int(x):,}" if isinstance(x, (int, float)) else x

# Explicitly set database URI from environment variable
database_url = os.environ.get('DATABASE_URL')
if database_url:
    # Ensure proper PostgreSQL connection string format
    # Heroku-style connection strings start with postgres:// but SQLAlchemy requires postgresql://
    if database_url.startswith('postgres://'):
        database_url = database_url.replace('postgres://', 'postgresql://', 1)
    app.config['SQLALCHEMY_DATABASE_URI'] = database_url
    logger.info(f"Using database from DATABASE_URL environment variable")
else:
    logger.warning("DATABASE_URL not found, using fallback database configuration")

# Initialize SQLAlchemy with additional connection settings
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SQLALCHEMY_ENGINE_OPTIONS'] = {
    "pool_recycle": 300,
    "pool_pre_ping": True
}

# Add SSL requirement for PostgreSQL connections
if app.config['SQLALCHEMY_DATABASE_URI'] and app.config['SQLALCHEMY_DATABASE_URI'].startswith('postgresql'):
    app.config['SQLALCHEMY_ENGINE_OPTIONS']["connect_args"] = {"sslmode": "require"}
    logger.info("PostgreSQL SSL mode enabled")

# Initialize SQLAlchemy
db.init_app(app)

# Initialize Login Manager
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# Initialize CSRF Protection
csrf = EnhancedCSRFProtect(app)
# EnhancedCSRFProtect class handles all the configuration, so we don't need to set these manually

# Exempt endpoints that don't need CSRF protection
csrf.exempt('scan_ticket')
csrf.exempt('check_js')
csrf.exempt('resolve_health_alert')
csrf.exempt('api_system_metrics')
csrf.exempt('record_impression')
csrf.exempt('record_click')
csrf.exempt('get_file_upload_progress')
csrf.exempt('health_check')
csrf.exempt('health_port_check')
csrf.exempt('puppeteer_status')

# Exempt all lottery analysis API endpoints
csrf.exempt('api_frequency_analysis')
csrf.exempt('api_pattern_analysis')
csrf.exempt('api_time_series_analysis')
csrf.exempt('api_correlation_analysis')
csrf.exempt('api_winner_analysis')
csrf.exempt('api_lottery_prediction')
csrf.exempt('api_full_analysis')

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Defer database schema creation to background thread
def init_database():
    """Initialize database tables in background thread"""
    with app.app_context():
        db.create_all()
        logger.info("Database tables created/verified")
        
# Start database initialization in background to avoid blocking startup
threading.Thread(target=init_database, daemon=True).start()

# Lazy load these modules - will be imported when needed
# This helps reduce initial load time
data_aggregator = None
import_excel = None
import_snap_lotto_data = None
ocr_processor = None
puppeteer_service = None
# scheduler is imported at the top level to ensure screenshot functions work
health_monitor = None

def init_lazy_modules():
    """Initialize modules in a background thread with timeout"""
    global data_aggregator, import_excel, import_snap_lotto_data, ocr_processor, puppeteer_service, health_monitor
    
    # Prioritize core modules
    try:
        import data_aggregator as da
        data_aggregator = da
    except Exception as e:
        logger.error(f"Error loading data_aggregator: {e}")
    
    # Note: Removed signal alarm since it only works in main thread
    
    # Import heavy modules only when needed
    import data_aggregator as da
    import import_excel as ie
    import import_snap_lotto_data as isld
    import ocr_processor as op
    import puppeteer_service as ps
    import health_monitor as hm
    
    # Store module references
    data_aggregator = da
    import_excel = ie
    import_snap_lotto_data = isld
    ocr_processor = op
    puppeteer_service = ps
    health_monitor = hm
    
    # Initialize scheduler and health monitoring in background after imports are complete
    with app.app_context():
        scheduler.init_scheduler(app)
        health_monitor.init_health_monitor(app, db)
    
    logger.info("All modules lazy-loaded successfully")

# Start lazy loading in background thread
threading.Thread(target=init_lazy_modules, daemon=True).start()

# Additional routes and functionality would be defined here...
# For the sake of brevity, only core routes are included

@app.route('/')
def index():
    """Homepage with latest lottery results"""
    # Ensure data_aggregator is loaded before using it
    global data_aggregator
    
    try:
        # Import if not already loaded
        if data_aggregator is None:
            import data_aggregator as da
            data_aggregator = da
            logger.info("Loaded data_aggregator module on demand")
        
        # First, validate and correct any known draws (adds missing division data)
        try:
            corrected = data_aggregator.validate_and_correct_known_draws()
            if corrected > 0:
                logger.info(f"Corrected {corrected} lottery draws with verified data")
        except Exception as e:
            logger.error(f"Error in validate_and_correct_known_draws: {e}")
        
        # Get the latest results for each lottery type
        try:
            latest_results = data_aggregator.get_latest_results()
            
            # Convert dictionary of results to a list for iteration in the template
            results_list = []
            
            # Use a dictionary to track unique draw numbers per type to avoid duplicates
            seen_draws = {}
            normalized_results = {}
            
            # First, create a dictionary to group results by normalized type
            type_groups = {}
            for lottery_type, result in latest_results.items():
                # Normalize the lottery type
                normalized_type = data_aggregator.normalize_lottery_type(lottery_type)
                
                # Group all results by normalized type
                if normalized_type not in type_groups:
                    type_groups[normalized_type] = []
                type_groups[normalized_type].append(result)
            
            # Now select the newest result for each normalized type
            for normalized_type, type_results in type_groups.items():
                # Sort by date (newest first)
                type_results.sort(key=lambda x: x.draw_date, reverse=True)
                # Take the newest result only
                newest_result = type_results[0]
                normalized_results[normalized_type] = newest_result
            
            # Second pass: add results using normalized keys to avoid duplicates
            for normalized_type, result in normalized_results.items():
                # Generate a deduplication key using normalized type
                key = f"{normalized_type}_{result.draw_number}"
                if key not in seen_draws:
                    # Clone the result to avoid modifying the database object directly
                    # This prevents unique constraint violations when adding to results_list
                    result_clone = LotteryResult(
                        id=result.id,
                        lottery_type=normalized_type,  # Use normalized type
                        draw_number=result.draw_number,
                        draw_date=result.draw_date,
                        numbers=result.numbers,
                        bonus_numbers=result.bonus_numbers,
                        divisions=result.divisions,
                        source_url=result.source_url,
                        screenshot_id=result.screenshot_id,
                        ocr_provider=result.ocr_provider,
                        ocr_model=result.ocr_model,
                        ocr_timestamp=result.ocr_timestamp,
                        created_at=result.created_at
                    )
                    results_list.append(result_clone)
                    seen_draws[key] = True
            
            # Define standard order of lottery types for consistent display
            lottery_type_order = [
                'Lottery', 
                'Lottery Plus 1', 
                'Lottery Plus 2', 
                'Powerball', 
                'Powerball Plus', 
                'Daily Lottery'
            ]
            
            # Create an order lookup dictionary for sorting (lower value = higher priority)
            lottery_order_lookup = {lottery_type: index for index, lottery_type in enumerate(lottery_type_order)}
            
            # Sort by lottery type order first, then by date (newest first) for same lottery type
            def sort_key(result):
                # If the lottery type isn't in our predefined order, put it at the end
                order_position = lottery_order_lookup.get(result.lottery_type, len(lottery_type_order))
                # Return a tuple to allow sortable comparison
                return (order_position, -int(result.draw_number) if result.draw_number.isdigit() else 0)
                
            # Apply the sorting
            results_list.sort(key=sort_key)
        except Exception as e:
            logger.error(f"Error getting latest lottery results: {e}")
            latest_results = {}
            results_list = []
        
        # Get analytics data for the dashboard
        try:
            frequent_numbers = data_aggregator.get_most_frequent_numbers(limit=10)
        except Exception as e:
            logger.error(f"Error getting frequent numbers: {e}")
            frequent_numbers = []
            
        try:
            division_stats = data_aggregator.get_division_statistics()
        except Exception as e:
            logger.error(f"Error getting division statistics: {e}")
            division_stats = {}
            
        # Get cold numbers (least frequently drawn)
        try:
            cold_numbers = data_aggregator.get_least_frequent_numbers(limit=5)
        except Exception as e:
            logger.error(f"Error getting cold numbers: {e}")
            cold_numbers = []
            
        # Get numbers not drawn recently
        try:
            absent_numbers = data_aggregator.get_numbers_not_drawn_recently(limit=5)
        except Exception as e:
            logger.error(f"Error getting absent numbers: {e}")
            absent_numbers = []
        
        # Define rich meta description for SEO
        meta_description = "Get the latest South African lottery results for Lottery, PowerBall and Daily Lottery. View winning numbers, jackpot amounts, and most frequently drawn numbers updated in real-time."
        
        # Home page doesn't need breadcrumbs (it's the root), but we define an empty list for consistency
        breadcrumbs = []
        
        return render_template('index.html', 
                            latest_results=latest_results,
                            results=results_list,
                            frequent_numbers=frequent_numbers,
                            cold_numbers=cold_numbers,
                            absent_numbers=absent_numbers,
                            division_stats=division_stats,
                            title="South African Lottery Results | Latest Winning Numbers",
                            meta_description=meta_description,
                            breadcrumbs=breadcrumbs)
    except Exception as e:
        logger.error(f"Critical error in index route: {e}")
        # Define rich meta description for SEO even in error case
        meta_description = "Get the latest South African lottery results for Lottery, PowerBall and Daily Lottery. View winning numbers, jackpot amounts, and most frequently drawn numbers updated in real-time."
        
        # Define empty breadcrumbs for consistency even in error case
        breadcrumbs = []
        
        return render_template('index.html', 
                            latest_results={},
                            results=[],
                            frequent_numbers=[],
                            cold_numbers=[],
                            absent_numbers=[],
                            division_stats={},
                            title="South African Lottery Results | Latest Winning Numbers",
                            meta_description=meta_description,
                            breadcrumbs=breadcrumbs)

@app.route('/admin')
@login_required
def admin():
    """Admin dashboard page"""
    if not current_user.is_admin:
        flash('You must be an admin to access this page.', 'danger')
        return redirect(url_for('index'))

    screenshots = Screenshot.query.order_by(Screenshot.timestamp.desc()).all()
    schedule_configs = ScheduleConfig.query.all()

    # Define breadcrumbs for SEO
    breadcrumbs = [
        {"name": "Admin Dashboard", "url": url_for('admin')}
    ]

    # Define SEO metadata
    meta_description = "Admin dashboard for the South African lottery results system. Manage data, screenshots, schedule configurations, and system settings."
    
    return render_template('admin/dashboard.html', 
                          screenshots=screenshots,
                          schedule_configs=schedule_configs,
                          title="Admin Dashboard | Lottery Results Management",
                          breadcrumbs=breadcrumbs,
                          meta_description=meta_description)

@app.route('/login', methods=['GET', 'POST'])
@csrf.exempt
def login():
    """Login page"""
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        user = User.query.filter_by(username=username).first()
        if user and user.check_password(password):
            login_user(user)
            flash('Login successful!', 'success')
            next_page = request.args.get('next')
            return redirect(next_page or url_for('index'))
        else:
            flash('Invalid username or password', 'danger')
    
    # Define SEO metadata
    meta_description = "Secure login for administration of the South African lottery results system. Access administrative features to manage lottery data and system settings."
    
    # Define breadcrumbs for SEO
    breadcrumbs = [
        {"name": "Admin Login", "url": url_for('login')}
    ]
    
    return render_template('login.html', 
                          title="Admin Login | Lottery Results Management",
                          meta_description=meta_description,
                          breadcrumbs=breadcrumbs)

@app.route('/logout')
@login_required
def logout():
    """Logout route"""
    logout_user()
    flash('You have been logged out.', 'info')
    return redirect(url_for('index'))

@app.route('/scan-lottery-ticket-south-africa')
@app.route('/scanner-landing')
def scanner_landing():
    """Landing page focused on the exclusive lottery ticket scanner feature"""
    # Define breadcrumbs for SEO
    breadcrumbs = [
        {"name": "Lottery Ticket Scanner", "url": url_for('scanner_landing')}
    ]
    
    # Define SEO metadata
    meta_description = "South Africa's ONLY lottery ticket scanner app. Instantly check if your Lottery, PowerBall, or Daily Lottery ticket is a winner by uploading a photo."
    
    return render_template('scanner_landing.html',
                          title="South Africa's ONLY Lottery Ticket Scanner App | Check If You've Won Instantly",
                          breadcrumbs=breadcrumbs,
                          meta_description=meta_description)

@app.route('/ticket-scanner')
def ticket_scanner():
    """Ticket scanner page - Allows users to scan and validate their lottery tickets"""
    # Define breadcrumbs for SEO
    breadcrumbs = [
        {"name": "Lottery Ticket Scanner", "url": url_for('scanner_landing')},
        {"name": "Scan Your Ticket", "url": url_for('ticket_scanner')}
    ]
    
    # Additional SEO metadata
    meta_description = "Check if your South African lottery ticket is a winner. Our free ticket scanner uses advanced technology to analyze and verify your lottery tickets instantly."
    
    return render_template('ticket_scanner.html', 
                          title="Lottery Ticket Scanner | Check If You've Won",
                          breadcrumbs=breadcrumbs,
                          meta_description=meta_description)
                          
@app.route('/clean-ticket-scanner')
def clean_ticket_scanner():
    """Clean implementation of the ticket scanner interface"""
    # Define breadcrumbs for SEO
    breadcrumbs = [
        {"name": "Lottery Ticket Scanner", "url": url_for('scanner_landing')},
        {"name": "Clean Scanner", "url": url_for('clean_ticket_scanner')}
    ]
    
    # Additional SEO metadata
    meta_description = "Check if your South African lottery ticket is a winner with our simplified, reliable scanner. Our clean implementation ensures reliable uploads and accurate results."
    
    return render_template('clean_ticket_scanner.html', 
                          title="Clean Lottery Ticket Scanner | Reliable Implementation",
                          breadcrumbs=breadcrumbs,
                          meta_description=meta_description)

@app.route('/scan-ticket', methods=['POST'])
@csrf.exempt
def scan_ticket():
    """Process uploaded ticket image and return results"""
    logger.info("Scan ticket request received")
    
    # Enhanced request debugging
    logger.info(f"Request method: {request.method}")
    logger.info(f"Request content type: {request.content_type}")
    logger.info(f"Request files keys: {list(request.files.keys()) if request.files else 'No files'}")
    logger.info(f"Request form keys: {list(request.form.keys()) if request.form else 'No form data'}")
    
    # Check if file is included in the request
    if 'ticket_image' not in request.files:
        logger.error("No ticket_image in request.files")
        logger.error(f"Request files: {request.files}")
        return jsonify({"error": "No ticket image provided"}), 400
        
    file = request.files['ticket_image']
    logger.info(f"Received file: {file.filename}, Content type: {file.content_type}")
    
    # If user does not select file, browser also submits an empty part without filename
    if file.filename == '':
        logger.error("Empty filename submitted")
        return jsonify({"error": "No selected file"}), 400
        
    # Get the lottery type if specified (optional)
    lottery_type = request.form.get('lottery_type', '')
    
    # Get draw number if specified (optional)
    draw_number = request.form.get('draw_number', None)
    
    # Get file extension
    file_extension = os.path.splitext(file.filename)[1].lower()
    if not file_extension:
        logger.info("No file extension found, defaulting to .jpeg")
        file_extension = '.jpeg'  # Default to JPEG if no extension
    
    try:
        # Read the file data
        image_data = file.read()
        file_size = len(image_data)
        logger.info(f"Read file data successfully, file size: {file_size} bytes")
        
        if file_size == 0:
            logger.error("File data is empty")
            return jsonify({"error": "Empty file uploaded"}), 400
        
        # Import the ticket scanner module
        import ticket_scanner as ts
        
        # Process the ticket image using existing function
        logger.info(f"Processing ticket image: lottery_type={lottery_type}, draw_number={draw_number}")
        result = ts.process_ticket_image(
            image_data=image_data,
            lottery_type=lottery_type,
            draw_number=draw_number,
            file_extension=file_extension
        )
        
        # Logging the success
        logger.info(f"Ticket processed successfully: {result.get('status', 'unknown')}")
        
        # Return JSON response with results
        return jsonify(result)
    except Exception as e:
        logger.exception(f"Error processing ticket: {str(e)}")
        # Include more details in the error response
        return jsonify({
            "error": f"Error processing ticket: {str(e)}",
            "status": "error",
            "request_details": {
                "filename": file.filename if file else "No file",
                "content_type": file.content_type if file else "Unknown content type",
                "lottery_type": lottery_type,
                "draw_number": draw_number
            }
        }), 500

# Guides Routes
@app.route('/guides')
def guides_index():
    """Display index of lottery guides"""
    # Define breadcrumbs for SEO
    breadcrumbs = [
        {"name": "Home", "url": url_for('index')},
        {"name": "Lottery Guides", "url": url_for('guides_index')}
    ]
    
    # Define SEO metadata
    meta_description = "Comprehensive guides on how to play South African lottery games. Learn rules, strategies, and tips for Lottery, PowerBall, Daily Lottery and more."
    
    return render_template('guides/index.html', 
                          title="South African Lottery Guides | Tips & How-To Articles",
                          breadcrumbs=breadcrumbs,
                          meta_description=meta_description)

@app.route('/guides/how-to-play-lottery')
def how_to_play_lotto():
    """Display guide on how to play Lottery"""
    # Define breadcrumbs for SEO
    breadcrumbs = [
        {"name": "Home", "url": url_for('index')},
        {"name": "Lottery Guides", "url": url_for('guides_index')},
        {"name": "How to Play Lottery", "url": url_for('how_to_play_lotto')}
    ]
    
    # Define SEO metadata
    meta_description = "Comprehensive guide on how to play the South African Lottery. Learn Lottery rules, drawing days, odds of winning, prize divisions, and expert tips."
    
    return render_template('guides/how_to_play_lotto.html',
                          title="How to Play Lottery South Africa | Complete Guide & Tips",
                          breadcrumbs=breadcrumbs,
                          meta_description=meta_description)

@app.route('/guides/how-to-play-powerball')
def how_to_play_powerball():
    """Display guide on how to play PowerBall"""
    # Define breadcrumbs for SEO
    breadcrumbs = [
        {"name": "Home", "url": url_for('index')},
        {"name": "Lottery Guides", "url": url_for('guides_index')},
        {"name": "How to Play PowerBall", "url": url_for('how_to_play_powerball')}
    ]
    
    # Define SEO metadata
    meta_description = "Complete guide to playing PowerBall South Africa. Learn game rules, drawing schedule, odds, prize divisions, and expert strategies to increase your chances."
    
    # Placeholder until we create the PowerBall guide template
    flash("PowerBall guide coming soon! Check out our Lottery guide in the meantime.", "info")
    return redirect(url_for('guides_index'))

@app.route('/guides/how-to-play-daily-lottery')
def how_to_play_daily_lotto():
    """Display guide on how to play Daily Lottery"""
    # Define breadcrumbs for SEO
    breadcrumbs = [
        {"name": "Home", "url": url_for('index')},
        {"name": "Lottery Guides", "url": url_for('guides_index')},
        {"name": "How to Play Daily Lottery", "url": url_for('how_to_play_daily_lotto')}
    ]
    
    # Define SEO metadata
    meta_description = "Learn how to play Daily Lottery South Africa with our comprehensive guide. Discover game rules, draw times, odds of winning, and how to claim prizes."
    
    # Placeholder until we create the Daily Lottery guide template
    flash("Daily Lottery guide coming soon! Check out our Lottery guide in the meantime.", "info")
    return redirect(url_for('guides_index'))

@app.route('/results')
def results():
    """Show overview of all lottery types with links to specific results"""
    lottery_types = ['Lottery', 'Lottery Plus 1', 'Lottery Plus 2', 
                     'Powerball', 'Powerball Plus', 'Daily Lottery']
    
    # Ensure data_aggregator is loaded before using it
    global data_aggregator
    
    # Import if not already loaded
    if data_aggregator is None:
        import data_aggregator as da
        data_aggregator = da
        logger.info("Loaded data_aggregator module on demand")
    
    latest_results = data_aggregator.get_latest_results()
    
    # Define breadcrumbs for SEO
    breadcrumbs = [
        {"name": "Results", "url": url_for('results')}
    ]
    
    return render_template('results_overview.html',
                          lottery_types=lottery_types,
                          latest_results=latest_results,
                          title="All Lottery Results",
                          breadcrumbs=breadcrumbs)

@app.route('/results/<lottery_type>')
def lottery_results(lottery_type):
    """Show all results for a specific lottery type"""
    page = request.args.get('page', 1, type=int)
    per_page = 10  # Number of results per page
    
    # Ensure data_aggregator is loaded before using it
    global data_aggregator
    
    # Import if not already loaded
    if data_aggregator is None:
        import data_aggregator as da
        data_aggregator = da
        logger.info("Loaded data_aggregator module on demand")
    
    # Get all results for this lottery type
    all_results = data_aggregator.get_all_results_by_lottery_type(lottery_type)
    
    # Create a paginated result from the raw list
    # This mimics SQLAlchemy's pagination object with the properties the template expects
    class PaginatedResults:
        def __init__(self, items, page, per_page, total):
            self.items = items
            self.page = page
            self.per_page = per_page
            self.total = total
            
        @property
        def pages(self):
            return (self.total + self.per_page - 1) // self.per_page
            
        @property
        def has_prev(self):
            return self.page > 1
            
        @property
        def has_next(self):
            return self.page < self.pages
            
        @property
        def prev_num(self):
            return self.page - 1 if self.has_prev else None
            
        @property
        def next_num(self):
            return self.page + 1 if self.has_next else None
            
        def iter_pages(self, left_edge=2, left_current=2, right_current=5, right_edge=2):
            last = 0
            for num in range(1, self.pages + 1):
                if num <= left_edge or \
                   (num > self.page - left_current - 1 and num < self.page + right_current) or \
                   num > self.pages - right_edge:
                    if last + 1 != num:
                        yield None
                    yield num
                    last = num
    
    # Calculate the sliced items for the current page
    start = (page - 1) * per_page
    end = min(start + per_page, len(all_results))
    items = all_results[start:end]
    
    # Create the pagination object
    results = PaginatedResults(items, page, per_page, len(all_results))
    
    # Define breadcrumbs for SEO
    breadcrumbs = [
        {"name": "Results", "url": url_for('results')},
        {"name": lottery_type, "url": url_for('lottery_results', lottery_type=lottery_type)}
    ]
    
    return render_template('results.html', 
                           results=results, 
                           lottery_type=lottery_type,
                           title=f"{lottery_type} Results",
                           breadcrumbs=breadcrumbs)

@app.route('/export-template')
@login_required
def export_template():
    """Export an empty spreadsheet template for importing lottery data"""
    if not current_user.is_admin:
        flash('You must be an admin to export templates.', 'danger')
        return redirect(url_for('index'))

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"lottery_data_template_{timestamp}.xlsx"
    
    # Create template with lottery-specific tabs
    create_template.create_template(os.path.join(app.config['UPLOAD_FOLDER'], filename))
    
    return send_from_directory(
        app.config['UPLOAD_FOLDER'], 
        filename, 
        as_attachment=True
    )

# File upload progress tracker
# This dictionary stores the progress of file uploads for each user
# Structure: {user_id: {'percentage': 0-100, 'status': 'uploading|processing|complete|error', 'filename': 'example.xlsx'}}
file_upload_progress = {}

@app.route('/api/file-upload-progress')
@login_required
def get_file_upload_progress():
    """API endpoint to get current file upload progress for the current user"""
    user_id = current_user.id
    
    # If no progress exists for this user, return default values
    if user_id not in file_upload_progress:
        file_upload_progress[user_id] = {
            'percentage': 0,
            'status': 'initializing',
            'filename': ''
        }
    
    return jsonify(file_upload_progress[user_id])

@app.route('/api/file-upload-progress/reset', methods=['POST'])
@login_required
@csrf.exempt
def reset_file_upload_progress():
    """Reset the file upload progress for the current user"""
    user_id = current_user.id
    
    file_upload_progress[user_id] = {
        'percentage': 0,
        'status': 'initializing',
        'filename': ''
    }
    
    return jsonify({'success': True})

@app.route('/import-latest-spreadsheet', methods=['POST'])
@login_required
@csrf.exempt
def import_latest_spreadsheet_route():
    """Import the latest spreadsheet file from attached_assets or uploads directory"""
    if not current_user.is_admin:
        flash('You must be an admin to import data.', 'danger')
        return redirect(url_for('index'))
    
    import_type = request.form.get('import_type', 'excel')
    purge = request.form.get('purge', 'no') == 'yes'
    pattern = request.form.get('pattern', '*.xlsx')  # Modified to look for any Excel file
    
    try:
        # First, try to find in attached_assets
        latest_file = find_latest_spreadsheet("attached_assets", pattern)
        
        # If not found in attached_assets, look in uploads directory
        if not latest_file and os.path.exists("uploads"):
            latest_file = find_latest_spreadsheet("uploads", pattern)
            
            if latest_file:
                logger.info(f"Using spreadsheet from uploads directory: {latest_file}")
                # If found in uploads, use that directory for import
                success = import_latest_spreadsheet("uploads", pattern, import_type, purge)
        else:
            # Using spreadsheet from attached_assets
            success = import_latest_spreadsheet("attached_assets", pattern, import_type, purge)
        
        if not latest_file:
            # Try one more time with the original lottery_data_*.xlsx pattern
            original_pattern = "lottery_data_*.xlsx"
            latest_file = find_latest_spreadsheet("attached_assets", original_pattern)
            
            if not latest_file and os.path.exists("uploads"):
                latest_file = find_latest_spreadsheet("uploads", original_pattern)
                
                if latest_file:
                    # If found in uploads with original pattern, use that
                    success = import_latest_spreadsheet("uploads", original_pattern, import_type, purge)
            else:
                # Using spreadsheet from attached_assets with original pattern
                success = import_latest_spreadsheet("attached_assets", original_pattern, import_type, purge)
        
        if not latest_file:
            flash(f'No Excel spreadsheets found in attached_assets or uploads directories. Please upload a spreadsheet first.', 'danger')
            return redirect(url_for('import_data'))
        
        if success:
            flash(f'Successfully imported latest spreadsheet: {os.path.basename(latest_file)}', 'success')
        else:
            flash(f'Failed to import spreadsheet: {os.path.basename(latest_file)}. Check logs for details.', 'danger')
            
        return redirect(url_for('import_data'))
        
    except Exception as e:
        logger.exception(f"Error importing spreadsheet: {str(e)}")
        flash(f'Error importing spreadsheet: {str(e)}', 'danger')
        return redirect(url_for('import_data'))

@app.route('/import-history')
@login_required
def import_history():
    """View import history and details"""
    if not current_user.is_admin:
        flash('You must be an admin to view import history.', 'danger')
        return redirect(url_for('index'))
    
    # Define breadcrumbs for SEO
    breadcrumbs = [
        {"name": "Admin Dashboard", "url": url_for('admin')},
        {"name": "Import History", "url": url_for('import_history')}
    ]
    
    # Define SEO metadata
    meta_description = "View and analyze South African lottery data import history. Track data sources, import dates, success rates, and detailed import logs for system administration."
    
    try:
        # Get recent imports with pagination
        page = request.args.get('page', 1, type=int)
        per_page = 10
        
        # Get all import history records, newest first
        imports = ImportHistory.query.order_by(ImportHistory.import_date.desc()).paginate(
            page=page, per_page=per_page, error_out=False)
        
        return render_template('import_history.html',
                            imports=imports,
                            title="Lottery Data Import History | System Administration",
                            breadcrumbs=breadcrumbs,
                            meta_description=meta_description)
    except Exception as e:
        app.logger.error(f"Error retrieving import history: {str(e)}")
        flash(f"Error loading import history: {str(e)}", 'danger')
        return redirect(url_for('admin'))

@app.route('/import-history/<int:import_id>')
@login_required
def import_details(import_id):
    """View details of a specific import"""
    if not current_user.is_admin:
        flash('You must be an admin to view import details.', 'danger')
        return redirect(url_for('index'))
    
    # Define SEO metadata (will be updated with specific import details when the record is loaded)
    meta_description = "Detailed South African lottery data import information. View imported draw numbers, dates, and success status for administrative record-keeping."
    
    try:
        # Get the import record
        import_record = ImportHistory.query.get_or_404(import_id)
        
        # Define breadcrumbs for SEO
        breadcrumbs = [
            {"name": "Admin Dashboard", "url": url_for('admin')},
            {"name": "Import History", "url": url_for('import_history')},
            {"name": f"Import #{import_id}", "url": url_for('import_details', import_id=import_id)}
        ]
        
        # Get all records that were imported in this batch
        imported_records = ImportedRecord.query.filter_by(import_id=import_id).all()
        
        # Group records by lottery type for easier display
        records_by_type = {}
        for record in imported_records:
            lottery_type = record.lottery_type
            if lottery_type not in records_by_type:
                records_by_type[lottery_type] = []
            records_by_type[lottery_type].append(record)
        
        # Update meta description with specific import details
        meta_description = f"Details for lottery data import #{import_id} from {import_record.import_date.strftime('%Y-%m-%d')}. Contains {len(imported_records)} records across {len(records_by_type)} lottery types."
        
        return render_template('import_details.html',
                              import_record=import_record,
                              records_by_type=records_by_type,
                              title=f"Import Details #{import_id} | {import_record.import_date.strftime('%Y-%m-%d %H:%M')}",
                              breadcrumbs=breadcrumbs,
                              meta_description=meta_description)
    except Exception as e:
        app.logger.error(f"Error retrieving import details: {str(e)}")
        flash(f"Error loading import details: {str(e)}", 'danger')
        return redirect(url_for('import_history'))

@app.route('/import-data', methods=['GET', 'POST'])
@login_required
@csrf.exempt
def import_data():
    """Import data from Excel spreadsheet"""
    global import_excel, import_snap_lotto_data
    
    if not current_user.is_admin:
        flash('You must be an admin to import data.', 'danger')
        return redirect(url_for('index'))
        
    import_stats = None
    user_id = current_user.id
    
    # Define breadcrumbs for SEO
    breadcrumbs = [
        {"name": "Admin Dashboard", "url": url_for('admin')},
        {"name": "Import Data", "url": url_for('import_data')}
    ]
    
    # Define SEO metadata
    meta_description = "Import South African lottery data from Excel spreadsheets. Upload Lottery, PowerBall, and Daily Lottery results to maintain an up-to-date database of winning numbers and prize information."
    
    # Initialize or reset progress tracking
    file_upload_progress[user_id] = {
        'percentage': 0,
        'status': 'initializing',
        'filename': ''
    }

    if request.method == 'POST':
        # Check if the post request has the file part
        if 'file' not in request.files:
            flash('No file part', 'danger')
            return redirect(request.url)
            
        file = request.files['file']
        
        # If user does not select file, browser also
        # submit an empty part without filename
        if file.filename == '':
            flash('No selected file', 'danger')
            return redirect(request.url)
            
        if file:
            filename = secure_filename(file.filename)
            excel_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            
            # Update progress
            file_upload_progress[user_id] = {
                'percentage': 25,
                'status': 'uploading',
                'filename': filename
            }
            
            # Save the file
            os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
            file.save(excel_path)
            
            # Update progress
            file_upload_progress[user_id] = {
                'percentage': 50,
                'status': 'processing',
                'filename': filename
            }
            
            try:
                # Check if this is a multi-sheet template by trying to detect sheets
                is_template_format = False
                try:
                    import pandas as pd
                    # Load Excel file and check for template sheets
                    xl = pd.ExcelFile(excel_path)
                    sheet_names = xl.sheet_names
                    
                    # Check if the file has the expected sheet structure (multiple sheets with lottery type names)
                    template_sheets = [
                        "Lottery", "Lottery Plus 1", "Lottery Plus 2", 
                        "Powerball", "Powerball Plus", "Daily Lottery"
                    ]
                    
                    # If at least 3 of the expected template sheets are present, we consider it a template
                    matches = sum(1 for sheet in template_sheets if sheet in sheet_names)
                    is_template_format = matches >= 3
                    
                    # Also consider template if the name contains "template"
                    if not is_template_format:
                        is_template_format = "template" in filename.lower()
                        
                    logger.info(f"File format detection: {'multi-sheet template' if is_template_format else 'standard'}")
                except Exception as e:
                    logger.warning(f"Error detecting file format: {str(e)}")
                    # Fall back to filename detection
                    is_template_format = "template" in filename.lower()
                
                if is_template_format:
                    try:
                        # Update progress
                        file_upload_progress[user_id] = {
                            'percentage': 50,
                            'status': 'processing template format',
                            'filename': filename
                        }
                        
                        # Import using the multi-sheet template processor
                        import multi_sheet_import
                        import_stats = multi_sheet_import.import_multisheet_excel(excel_path, flask_app=app)
                        
                        # If import was successful, track it in the import history
                        if isinstance(import_stats, dict) and import_stats.get('success'):
                            # Create import history record
                            import_history = ImportHistory(
                                import_type='multi_sheet_template',
                                file_name=filename,
                                records_added=import_stats.get('added', 0),
                                records_updated=import_stats.get('updated', 0),
                                total_processed=import_stats.get('total', 0),
                                errors=import_stats.get('errors', 0),
                                user_id=current_user.id
                            )
                            db.session.add(import_history)
                            db.session.commit()
                            
                            # Save individual imported records if available
                            if 'imported_records' in import_stats and import_stats['imported_records']:
                                for record_data in import_stats['imported_records']:
                                    imported_record = ImportedRecord(
                                        import_id=import_history.id,
                                        lottery_type=record_data['lottery_type'],
                                        draw_number=record_data['draw_number'],
                                        draw_date=record_data['draw_date'],
                                        is_new=record_data['is_new'],
                                        lottery_result_id=record_data['lottery_result_id']
                                    )
                                    db.session.add(imported_record)
                                db.session.commit()
                            
                            # Display results
                            added = import_stats.get('added', 0)
                            total = import_stats.get('total', 0)
                            errors = import_stats.get('errors', 0)
                            updated = import_stats.get('updated', 0)
                            
                            if added > 0 and updated > 0:
                                flash(f'Multi-sheet template import completed successfully. Added {added} new records, updated {updated} existing records, processed {total} total records with {errors} errors.', 'success')
                            elif added > 0:
                                flash(f'Multi-sheet template import completed successfully. Added {added} new records, processed {total} total records with {errors} errors.', 'success')
                            elif updated > 0:
                                flash(f'Multi-sheet template import completed successfully. Updated {updated} existing records, processed {total} total records with {errors} errors.', 'success')
                            else:
                                flash(f'Multi-sheet template import completed. No records were added or updated. Processed {total} records with {errors} errors.', 'info')
                        else:
                            error_msg = import_stats.get('error', 'Unknown error')
                            flash(f'Error in multi-sheet template import: {error_msg}', 'danger')
                        
                        # Update progress to complete
                        file_upload_progress[user_id] = {
                            'percentage': 100,
                            'status': 'complete',
                            'filename': filename,
                            'summary': import_stats if isinstance(import_stats, dict) else None
                        }
                    except Exception as e:
                        logger.error(f"Multi-sheet template import error: {str(e)}")
                        logger.error(traceback.format_exc())
                        flash(f"Error in multi-sheet template import: {str(e)}", 'danger')
                        
                        # Update progress to error
                        file_upload_progress[user_id] = {
                            'percentage': 100,
                            'status': 'error',
                            'filename': filename
                        }
                else:
                    # Try standard format for non-template files
                    try:
                        if import_excel is None:
                            import import_excel as ie
                        else:
                            ie = import_excel
                        import_stats = ie.import_excel_data(excel_path)
                        
                        # If import was successful, track it in the import history
                        if isinstance(import_stats, dict) and import_stats.get('success'):
                            # Create import history record
                            import_history = ImportHistory(
                                import_type='excel',
                                file_name=filename,
                                records_added=import_stats.get('added', 0),
                                records_updated=import_stats.get('updated', 0),
                                total_processed=import_stats.get('total', 0),
                                errors=import_stats.get('errors', 0),
                                user_id=current_user.id
                            )
                            db.session.add(import_history)
                            db.session.commit()
                            
                            # Save individual imported records if available
                            if 'imported_records' in import_stats and import_stats['imported_records']:
                                for record_data in import_stats['imported_records']:
                                    imported_record = ImportedRecord(
                                        import_id=import_history.id,
                                        lottery_type=record_data['lottery_type'],
                                        draw_number=record_data['draw_number'],
                                        draw_date=record_data['draw_date'],
                                        is_new=record_data['is_new'],
                                        lottery_result_id=record_data['lottery_result_id']
                                    )
                                    db.session.add(imported_record)
                                db.session.commit()
                        
                        # Check if import was unsuccessful (False) or if no records were imported
                        if import_stats is False or (isinstance(import_stats, dict) and import_stats.get('total', 0) == 0):
                            # If standard import fails, try Snap Lotto format
                            try:
                                # Update progress
                                file_upload_progress[user_id] = {
                                    'percentage': 75,
                                    'status': 'processing',
                                    'filename': filename
                                }
                                
                                # Import import_snap_lotto_data if not already loaded
                                if import_snap_lotto_data is None:
                                    import import_snap_lotto_data as isld
                                else:
                                    isld = import_snap_lotto_data
                                import_stats = isld.import_snap_lotto_data(excel_path, flask_app=app)
                                
                                # If import was successful, track it in the import history
                                if isinstance(import_stats, dict) and import_stats.get('success'):
                                    # Create import history record
                                    import_history = ImportHistory(
                                        import_type='snap_lotto',
                                        file_name=filename,
                                        records_added=import_stats.get('added', 0),
                                        records_updated=import_stats.get('updated', 0),
                                        total_processed=import_stats.get('total', 0),
                                        errors=import_stats.get('errors', 0),
                                        user_id=current_user.id
                                    )
                                    db.session.add(import_history)
                                    db.session.commit()
                                    
                                    # Save individual imported records if available
                                    if 'imported_records' in import_stats and import_stats['imported_records']:
                                        for record_data in import_stats['imported_records']:
                                            imported_record = ImportedRecord(
                                                import_id=import_history.id,
                                                lottery_type=record_data['lottery_type'],
                                                draw_number=record_data['draw_number'],
                                                draw_date=record_data['draw_date'],
                                                is_new=record_data['is_new'],
                                                lottery_result_id=record_data['lottery_result_id']
                                            )
                                            db.session.add(imported_record)
                                        db.session.commit()
                                
                                # Display results if available and successful
                                if isinstance(import_stats, dict) and import_stats.get('success'):
                                    added = import_stats.get('added', 0)
                                    total = import_stats.get('total', 0)
                                    errors = import_stats.get('errors', 0)
                                    
                                    updated = import_stats.get('updated', 0)
                                    if added > 0 and updated > 0:
                                        flash(f'Snap Lotto import completed successfully. Added {added} new records, updated {updated} existing records, processed {total} total records with {errors} errors.', 'success')
                                    elif added > 0:
                                        flash(f'Snap Lotto import completed successfully. Added {added} new records, processed {total} total records with {errors} errors.', 'success')
                                    elif updated > 0:
                                        flash(f'Snap Lotto import completed successfully. Updated {updated} existing records, processed {total} total records with {errors} errors.', 'success')
                                    else:
                                        flash(f'Snap Lotto import completed. No records were added or updated. Processed {total} records with {errors} errors.', 'info')
                                else:
                                    flash('Snap Lotto import completed', 'info')
                                
                                # Update progress to complete
                                file_upload_progress[user_id] = {
                                    'percentage': 100,
                                    'status': 'complete',
                                    'filename': filename,
                                    'summary': import_stats if isinstance(import_stats, dict) else None
                                }
                            except Exception as e:
                                logger.error(f"Snap Lotto import error: {str(e)}")
                                flash(f"Error in Snap Lotto import: {str(e)}", 'danger')
                                
                                # Update progress to error
                                file_upload_progress[user_id] = {
                                    'percentage': 100,
                                    'status': 'error',
                                    'filename': filename
                                }
                        else:
                            # Display results for standard import
                            if isinstance(import_stats, dict) and import_stats.get('success'):
                                added = import_stats.get('added', 0)
                                total = import_stats.get('total', 0)
                                errors = import_stats.get('errors', 0)
                                
                                updated = import_stats.get('updated', 0)
                                if added > 0 and updated > 0:
                                    flash(f'Import completed successfully. Added {added} new records, updated {updated} existing records, processed {total} total records with {errors} errors.', 'success')
                                elif added > 0:
                                    flash(f'Import completed successfully. Added {added} new records, processed {total} total records with {errors} errors.', 'success')
                                elif updated > 0:
                                    flash(f'Import completed successfully. Updated {updated} existing records, processed {total} total records with {errors} errors.', 'success')
                                else:
                                    flash(f'Import completed. No records were added or updated. Processed {total} records with {errors} errors.', 'info')
                            else:
                                flash('Import completed', 'info')
                            
                            # Update progress to complete
                            file_upload_progress[user_id] = {
                                'percentage': 100,
                                'status': 'complete',
                                'filename': filename,
                                'summary': import_stats if isinstance(import_stats, dict) else None
                            }
                    except Exception as e:
                        logger.error(f"Excel import error: {str(e)}")
                        flash(f"Error in import: {str(e)}", 'danger')
                        
                        # Update progress to error
                        file_upload_progress[user_id] = {
                            'percentage': 100,
                            'status': 'error',
                            'filename': filename
                        }
            except Exception as e:
                logger.error(f"File processing error: {str(e)}")
                logger.error(traceback.format_exc())
                flash(f"File processing error: {str(e)}", 'danger')
                
                # Update progress to error
                file_upload_progress[user_id] = {
                    'percentage': 100,
                    'status': 'error',
                    'filename': filename
                }
                
    # Get some example results for each lottery type to display
    example_results = {}
    lottery_types = ['Lottery', 'Lottery Plus 1', 'Lottery Plus 2', 
                     'Powerball', 'Powerball Plus', 'Daily Lottery']
    
    try:                 
        for lottery_type in lottery_types:
            try:
                results = LotteryResult.query.filter_by(lottery_type=lottery_type).order_by(
                    LotteryResult.draw_date.desc()).limit(5).all()
                if results:
                    example_results[lottery_type] = results
            except Exception as e:
                app.logger.error(f"Error retrieving example results for {lottery_type}: {str(e)}")
                # Continue with other lottery types even if one fails
                continue
    except Exception as e:
        app.logger.error(f"Database error in import_data: {str(e)}")
        # If we can't get any example results, proceed without them
    
    # Extract structured data from import_stats (if available) for template rendering
    added_count = 0
    updated_count = 0
    total_count = 0
    error_count = 0
    imported_results = []
    
    if isinstance(import_stats, dict) and import_stats.get('success'):
        added_count = import_stats.get('added', 0)
        updated_count = import_stats.get('updated', 0)
        total_count = import_stats.get('total', 0)
        error_count = import_stats.get('errors', 0)
        
        # Get imported records for display
        if 'imported_records' in import_stats and import_stats['imported_records']:
            for record_data in import_stats['imported_records']:
                result = LotteryResult.query.get(record_data.get('lottery_result_id'))
                if result:
                    imported_results.append(result)
    
    return render_template('import_data.html', 
                           import_stats=import_stats,
                           example_results=example_results,
                           title="Import South African Lottery Data | Admin Tools",
                           meta_description=meta_description,
                           breadcrumbs=breadcrumbs,
                           added_count=added_count,
                           updated_count=updated_count,
                           total_count=total_count,
                           error_count=error_count,
                           imported_results=imported_results)

@app.route('/retake-screenshots')
@login_required
def retake_screenshots():
    """Admin route to retake all screenshots"""
    if not current_user.is_admin:
        flash('You must be an admin to retake screenshots.', 'danger')
        return redirect(url_for('index'))
        
    try:
        result = scheduler.retake_all_screenshots()
        
        if result:
            success_count = sum(1 for status in result.values() if status == 'success')
            fail_count = len(result) - success_count
            
            flash(f'Screenshot process started. {success_count} URLs queued successfully. {fail_count} failed.', 'info')
        else:
            flash('No URLs configured for screenshots.', 'warning')
    except Exception as e:
        flash(f'Error: {str(e)}', 'danger')
    
    return redirect(url_for('admin'))

@app.route('/purge-database')
@login_required
def purge_database():
    """Admin route to purge all data from the database"""
    if not current_user.is_admin:
        flash('You must be an admin to purge the database.', 'danger')
        return redirect(url_for('index'))
        
    try:
        # Import the purge_data module
        import purge_data
        
        # Execute the purge operation
        result = purge_data.purge_data()
        
        if result:
            flash('Database purged successfully. All lottery results and screenshots have been deleted.', 'success')
        else:
            flash('An error occurred during the purge operation.', 'danger')
    except Exception as e:
        flash(f'Error: {str(e)}', 'danger')
    
    return redirect(url_for('admin'))

def ensure_screenshots_for_schedules():
    """
    Ensure that every URL in ScheduleConfig has a corresponding Screenshot record.
    This function is called from the settings page to maintain consistency between
    the settings page URLs and the export-screenshots page thumbnails.
    
    Returns:
        tuple: (created_count, updated_count) - Number of screenshot records created or updated
    """
    created_count = 0
    updated_count = 0
    
    # Get all scheduled configurations
    schedule_configs = ScheduleConfig.query.all()
    
    for config in schedule_configs:
        # Check if a screenshot record exists for this URL
        existing_screenshot = Screenshot.query.filter_by(url=config.url).first()
        
        if existing_screenshot:
            # Update the existing record if needed
            if existing_screenshot.lottery_type != config.lottery_type:
                existing_screenshot.lottery_type = config.lottery_type
                updated_count += 1
                app.logger.info(f"Updated screenshot record for {config.lottery_type} ({config.url})")
        else:
            # Create a new screenshot record if none exists
            new_screenshot = Screenshot(
                url=config.url,
                lottery_type=config.lottery_type,
                path="",  # Will be populated when screenshot is taken
                timestamp=datetime.now()
            )
            db.session.add(new_screenshot)
            created_count += 1
            app.logger.info(f"Created new screenshot record for {config.lottery_type} ({config.url})")
    
    # Commit changes if any were made
    if created_count > 0 or updated_count > 0:
        db.session.commit()
        
    return created_count, updated_count

@app.route('/settings', methods=['GET', 'POST'])
@login_required
def settings():
    """Manage data syncs and system settings"""
    if not current_user.is_admin:
        flash('You must be an admin to access settings.', 'danger')
        return redirect(url_for('index'))
    
    # Define breadcrumbs for SEO
    breadcrumbs = [
        {"name": "Admin Dashboard", "url": url_for('admin')},
        {"name": "System Settings", "url": url_for('settings')}
    ]
    
    # Define SEO metadata
    meta_description = "Configure South African lottery system settings and scheduled tasks. Manage data synchronization, screenshot capture timing, and system preferences."
    
    # Ensure screenshots exist for all scheduled configurations
    created, updated = ensure_screenshots_for_schedules()
    if created > 0:
        flash(f'Created {created} new screenshot records for scheduled URLs.', 'info')
    if updated > 0:
        flash(f'Updated {updated} existing screenshot records.', 'info')
    
    schedule_configs = ScheduleConfig.query.all()
    
    # Handle form submission for updating settings
    if request.method == 'POST':
        # This would normally handle the form submission
        flash('Settings updated successfully.', 'success')
        return redirect(url_for('settings'))
    
    return render_template('settings.html', 
                          schedule_configs=schedule_configs,
                          title="System Settings | Lottery Data Management",
                          meta_description=meta_description,
                          breadcrumbs=breadcrumbs)

def ensure_all_screenshot_entries_exist():
    """
    Make sure all the URLs from both:
    1. ScheduleConfig table (settings page)
    2. puppeteer_service.py's LOTTERY_URLS (hardcoded defaults)
    
    have corresponding entries in the Screenshot table
    """
    from puppeteer_service import LOTTERY_URLS
    
    # Get all existing screenshots
    existing_screenshots = Screenshot.query.all()
    existing_types = {screenshot.lottery_type for screenshot in existing_screenshots}
    existing_urls = {screenshot.url for screenshot in existing_screenshots}
    
    # Track what was created
    created_count = 0
    
    # Process configured URLs first (from Settings page)
    schedule_configs = ScheduleConfig.query.all()
    scheduled_types = set()
    
    # Add entries from ScheduleConfig (settings page)
    for config in schedule_configs:
        scheduled_types.add(config.lottery_type)
        
        # Check if this URL is already in screenshots
        if config.url not in existing_urls and config.lottery_type not in existing_types:
            app.logger.info(f"Creating missing screenshot entry for scheduled URL: {config.lottery_type}")
            
            # Create default placeholder paths
            screenshot = Screenshot(
                url=config.url,
                lottery_type=config.lottery_type,
                path="placeholder",  # Will be updated when screenshots are captured
                html_path="placeholder",  # Will be updated when screenshots are captured
                timestamp=datetime.now()
            )
            
            db.session.add(screenshot)
            created_count += 1
    
    # Add entries from hardcoded LOTTERY_URLS as fallback
    for lottery_type, url in LOTTERY_URLS.items():
        if lottery_type not in existing_types and lottery_type not in scheduled_types:
            app.logger.info(f"Creating missing screenshot entry from default URLs: {lottery_type}")
            
            # Create default placeholder paths
            screenshot = Screenshot(
                url=url,
                lottery_type=lottery_type,
                path="placeholder",  # Will be updated when screenshots are captured
                html_path="placeholder",  # Will be updated when screenshots are captured
                timestamp=datetime.now()
            )
            
            db.session.add(screenshot)
            created_count += 1
    
    # Save changes if any were made
    if created_count > 0:
        db.session.commit()
        app.logger.info(f"Created {created_count} missing screenshot entries")
    
    return created_count

@app.route('/export-screenshots')
@login_required
def export_screenshots():
    """Export screenshots with integrated Puppeteer functionality"""
    if not current_user.is_admin:
        flash('You must be an admin to export screenshots.', 'danger')
        return redirect(url_for('index'))
    
    # Define breadcrumbs for SEO
    breadcrumbs = [
        {"name": "Admin Dashboard", "url": url_for('admin')},
        {"name": "Export Screenshots", "url": url_for('export_screenshots')}
    ]
    
    # Define SEO metadata
    meta_description = "Export and manage South African lottery screenshots. Download captured lottery result images in various formats for analysis and record-keeping."
    
    # Ensure all the needed screenshot entries exist in the database
    created_count = ensure_all_screenshot_entries_exist()
    if created_count > 0:
        flash(f'Added {created_count} missing screenshot entries to the database. Please sync screenshots to capture the content.', 'info')
    
    # Get all screenshots, with newest first
    screenshots = Screenshot.query.order_by(Screenshot.timestamp.desc()).all()
    
    # Create a status object combining both global and session status
    sync_status = None
    
    # First check if we have a status in the global puppeteer_capture_status
    if puppeteer_capture_status.get('in_progress'):
        # Use the global status if a synchronization is in progress
        sync_status = {
            'status': puppeteer_capture_status.get('overall_status', 'info'),
            'message': puppeteer_capture_status.get('status_message', 'Screenshot synchronization in progress')
        }
    elif 'sync_status' in session:
        # Fall back to session status if no active synchronization
        sync_status = session.pop('sync_status')
    
    # Get the timestamp of the most recent screenshot for status display
    last_updated = None
    if screenshots:
        last_updated = screenshots[0].timestamp
    
    # Get lottery URLs from the ScheduleConfig table (settings page)
    # This makes the settings page the source of truth for screenshot URLs
    schedule_configs = ScheduleConfig.query.all()
    
    # Create a dictionary of lottery types to URLs for the template
    lottery_urls = {}
    for config in schedule_configs:
        lottery_urls[config.lottery_type] = config.url
    
    # If no URLs found in ScheduleConfig, fall back to defaults from puppeteer_service
    if not lottery_urls:
        app.logger.warning("No URLs found in ScheduleConfig table, falling back to defaults")
        from puppeteer_service import LOTTERY_URLS
        lottery_urls = LOTTERY_URLS
    
    # Add in-progress status if screenshots are currently being synchronized
    puppeteer_status = {
        'in_progress': puppeteer_capture_status.get('in_progress', False),
        'completed': puppeteer_capture_status.get('completed_screenshots', 0),
        'total': puppeteer_capture_status.get('total_screenshots', 0),
        'progress': puppeteer_capture_status.get('progress', 0),
        'status_message': puppeteer_capture_status.get('status_message', '')
    }
    
    return render_template('export_screenshots.html',
                          screenshots=screenshots,
                          title="Export Lottery Screenshots | Data Management",
                          meta_description=meta_description,
                          breadcrumbs=breadcrumbs,
                          sync_status=sync_status,
                          last_updated=last_updated,
                          lottery_urls=lottery_urls,
                          puppeteer_status=puppeteer_status)

@app.route('/export-screenshots-zip')
@login_required
def export_screenshots_zip():
    """Export all screenshots as a ZIP file"""
    if not current_user.is_admin:
        flash('You must be an admin to export screenshots.', 'danger')
        return redirect(url_for('index'))
    
    try:
        import io
        import zipfile
        from datetime import datetime
        
        # Get all screenshots
        screenshots = Screenshot.query.order_by(Screenshot.lottery_type).all()
        
        if not screenshots:
            flash('No screenshots available to export.', 'warning')
            return redirect(url_for('export_screenshots'))
        
        # Create a ZIP file in memory
        memory_file = io.BytesIO()
        with zipfile.ZipFile(memory_file, 'w', zipfile.ZIP_DEFLATED) as zf:
            for screenshot in screenshots:
                if os.path.exists(screenshot.path):
                    # Get the file extension
                    _, ext = os.path.splitext(screenshot.path)
                    # Create a unique filename for each screenshot
                    lottery_type = screenshot.lottery_type.replace(' ', '_')
                    timestamp = screenshot.timestamp.strftime('%Y%m%d_%H%M%S')
                    filename = f"{lottery_type}_{timestamp}{ext}"
                    
                    # Add the screenshot to the ZIP file
                    zf.write(screenshot.path, filename)
                    
                    # Add zoomed version if it exists
                    if screenshot.zoomed_path and os.path.exists(screenshot.zoomed_path):
                        _, zoomed_ext = os.path.splitext(screenshot.zoomed_path)
                        zoomed_filename = f"{lottery_type}_{timestamp}_zoomed{zoomed_ext}"
                        zf.write(screenshot.zoomed_path, zoomed_filename)
        
        # Reset the file pointer to the beginning of the file
        memory_file.seek(0)
        
        # Create a timestamp for the filename
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # Send the ZIP file as a response
        return send_file(
            memory_file,
            mimetype='application/zip',
            as_attachment=True,
            download_name=f'lottery_screenshots_{timestamp}.zip'
        )
    except Exception as e:
        app.logger.error(f"Error creating ZIP file: {str(e)}")
        flash(f'Error creating ZIP file: {str(e)}', 'danger')
        return redirect(url_for('export_screenshots'))

@app.route('/register', methods=['GET', 'POST'])
@login_required
def register():
    """Register a new admin user"""
    if not current_user.is_admin:
        flash('You must be an admin to register new users.', 'danger')
        return redirect(url_for('index'))
    
    # Define breadcrumbs for SEO
    breadcrumbs = [
        {"name": "Admin Dashboard", "url": url_for('admin')},
        {"name": "Register Admin", "url": url_for('register')}
    ]
    
    # Define SEO metadata
    meta_description = "Administrative user registration for South African lottery results system. Create secure admin accounts to manage lottery data and system configurations."
    
    if request.method == 'POST':
        username = request.form.get('username')
        email = request.form.get('email')
        password = request.form.get('password')
        
        if User.query.filter_by(username=username).first():
            flash('Username already exists', 'danger')
            return redirect(url_for('register'))
        
        if User.query.filter_by(email=email).first():
            flash('Email already exists', 'danger')
            return redirect(url_for('register'))
        
        user = User(username=username, email=email, is_admin=True)
        user.set_password(password)
        
        db.session.add(user)
        db.session.commit()
        
        flash(f'Admin user {username} registered successfully!', 'success')
        return redirect(url_for('admin'))
    
    return render_template('register.html', 
                          title="Register Admin User | Lottery Management System", 
                          breadcrumbs=breadcrumbs,
                          meta_description=meta_description)

@app.route('/visualizations')
def visualizations():
    """Advanced data visualization and analytics for South African lottery results"""
    lottery_types = ['Lottery', 'Lottery Plus 1', 'Lottery Plus 2', 
                    'Powerball', 'Powerball Plus', 'Daily Lottery']
    
    # Get some summary statistics
    total_draws = LotteryResult.query.count()
    latest_draw = LotteryResult.query.order_by(LotteryResult.draw_date.desc()).first()
    latest_draw_date = latest_draw.draw_date if latest_draw else None
    
    # Define breadcrumbs for SEO
    breadcrumbs = [
        {"name": "Analytics", "url": url_for('visualizations')}
    ]
    
    # Additional SEO metadata
    meta_description = "Explore comprehensive South African lottery analytics. View frequency charts, number patterns, and winning statistics for Lotto, Powerball, and Daily Lotto games."
    
    return render_template('visualizations.html',
                          lottery_types=lottery_types,
                          total_draws=total_draws,
                          latest_draw_date=latest_draw_date,
                          title="Lottery Data Analytics | Statistical Analysis & Visualizations",
                          breadcrumbs=breadcrumbs,
                          meta_description=meta_description)

@app.route('/api/visualization-data')
def visualization_data():
    """API endpoint for visualization data"""
    import data_aggregator
    from collections import Counter
    import logging
    
    data_type = request.args.get('data_type', 'numbers_frequency')
    lottery_type = request.args.get('lottery_type', 'all')
    
    logging.info(f"Visualization data request: type={data_type}, lottery={lottery_type}")
    
    try:
        # Get data specific to lottery type
        if data_type == 'numbers_frequency':
            # Get frequency count for all 49 numbers
            all_numbers = {str(i): 0 for i in range(1, 50)}
            
            # Count frequency of all numbers
            query = LotteryResult.query
            if lottery_type and lottery_type.lower() != 'all':
                query = query.filter_by(lottery_type=lottery_type)
                
            results = query.all()
            number_counter = Counter()
            
            logging.info(f"Found {len(results)} results for frequency analysis")
            
            for result in results:
                numbers = result.get_numbers_list()
                for num in numbers:
                    if 1 <= num <= 49:
                        number_counter[str(num)] += 1
            
            # Update all_numbers with actual frequencies
            for num, count in number_counter.items():
                if num in all_numbers:
                    all_numbers[num] = count
            
            # Convert to lists for JSON response
            data = [all_numbers[str(i)] for i in range(1, 50)]
            
            response_data = {
                'labels': [str(i) for i in range(1, 50)],
                'datasets': [{
                    'data': data
                }]
            }
            
            logging.info(f"Returning frequency data with {sum(data)} total occurrences")
            return jsonify(response_data)
        
        elif data_type == 'winners_by_division':
            # Get all results for this lottery type to process division data
            query = LotteryResult.query
            
            if lottery_type and lottery_type.lower() != 'all':
                # Try with exact match first
                results_by_type = query.filter_by(lottery_type=lottery_type).all()
                
                # If no results, try with normalized type
                if not results_by_type:
                    # Find any results with lottery type that might be a variant
                    lottery_type_variants = db.session.query(LotteryResult.lottery_type).distinct().all()
                    normalized_type = data_aggregator.normalize_lottery_type(lottery_type)
                    matching_types = []
                    
                    for lt in lottery_type_variants:
                        lt_name = lt[0]
                        if data_aggregator.normalize_lottery_type(lt_name) == normalized_type:
                            matching_types.append(lt_name)
                    
                    if matching_types:
                        results_by_type = query.filter(LotteryResult.lottery_type.in_(matching_types)).all()
            else:
                results_by_type = query.all()
            
            # Initialize division counters
            division_data = {}
            
            # Process division data from all matching results
            for result in results_by_type:
                divisions = result.get_divisions()
                if divisions:
                    for div_name, div_info in divisions.items():
                        # Extract the division number from the name (e.g., "Division 1" -> 1)
                        try:
                            div_num = int(div_name.split()[-1])
                            winners = div_info.get('winners', '0')
                            
                            # Convert winners to integer
                            if isinstance(winners, str):
                                winners = winners.replace(',', '')
                            winner_count = int(float(winners))
                            
                            if div_num not in division_data:
                                division_data[div_num] = 0
                            division_data[div_num] += winner_count
                        except (ValueError, IndexError):
                            continue
            
            # Sort divisions by number
            sorted_divisions = sorted(division_data.items())
            
            # Prepare data for chart
            divisions = [f'Division {div_num}' for div_num, _ in sorted_divisions]
            winner_counts = [count for _, count in sorted_divisions]
            
            logging.info(f"Processed {len(results_by_type)} results, found {len(divisions)} divisions with data")
            
            response_data = {
                'labels': divisions,
                'datasets': [{
                    'data': winner_counts
                }]
            }
            
            return jsonify(response_data)
        
        return jsonify({'error': 'Invalid data type'}), 400
    except Exception as e:
        logging.error(f"Error in visualization_data: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/results/<lottery_type>/<draw_number>')
def draw_details(lottery_type, draw_number):
    """Show detailed information for a specific draw"""
    # First, validate and correct any known draws (adds missing division data)
    # This ensures draw details have prize division data if it's available
    corrected = data_aggregator.validate_and_correct_known_draws()
    if corrected > 0:
        logger.info(f"Corrected {corrected} lottery draws with verified data")
    
    # Get all results with matching lottery type
    all_results = data_aggregator.get_all_results_by_lottery_type(lottery_type)
    
    # Find the specific draw
    result = None
    draw_number = draw_number.strip()
    
    for r in all_results:
        r_draw_number = r.draw_number
        # Clean up the draw number for comparison
        r_draw_number = r_draw_number.replace('Draw', '').replace('DRAW', '').replace(
            'Lotto', '').replace('Plus 1', '').replace('Plus 2', '').replace(
            'Powerball', '').replace('Daily', '').strip()
        
        if r_draw_number == draw_number or r.draw_number == draw_number:
            result = r
            break
    
    if not result:
        flash(f"Draw {draw_number} not found for {lottery_type}", "warning")
        return redirect(url_for('lottery_results', lottery_type=lottery_type))
    
    # Define breadcrumbs for SEO
    breadcrumbs = [
        {"name": "Results", "url": url_for('results')},
        {"name": lottery_type, "url": url_for('lottery_results', lottery_type=lottery_type)},
        {"name": f"Draw {draw_number}", "url": url_for('draw_details', lottery_type=lottery_type, draw_number=draw_number)}
    ]
    
    return render_template('draw_details.html',
                          result=result,
                          lottery_type=lottery_type,
                          title=f"{lottery_type} Draw {draw_number} Details",
                          breadcrumbs=breadcrumbs)

@app.route('/screenshot/<int:screenshot_id>')
def view_screenshot(screenshot_id):
    """View a screenshot image"""
    screenshot = Screenshot.query.get_or_404(screenshot_id)
    force_download = request.args.get('force_download', 'false').lower() == 'true'
    
    # Keep track of attempts for logging
    attempts = []
    app.logger.info(f"Attempting to view screenshot ID {screenshot_id}, type: {screenshot.lottery_type}")
    
    # Fix for empty image issue - check if url attribute exists and set it if missing
    if not hasattr(screenshot, 'url') or not screenshot.url:
        if hasattr(screenshot, 'source_url') and screenshot.source_url:
            screenshot.url = screenshot.source_url
            db.session.commit()
        else:
            # Try to set a reasonable default URL if none exists
            from config import Config
            for url_info in Config.RESULTS_URLS:
                if url_info['lottery_type'].lower() == screenshot.lottery_type.lower():
                    screenshot.url = url_info['url']
                    db.session.commit()
                    break
                    
    # Get the correct file extension for the screenshot file (if it exists)
    file_ext = '.png'  # Default extension
    if screenshot.path and os.path.exists(screenshot.path):
        _, file_ext = os.path.splitext(screenshot.path)
    
    # Look for any relevant files in the screenshots directory that might match this ID
    screenshots_dir = 'screenshots'
    html_dir = os.path.join(screenshots_dir, 'html')
    matching_files = []
    
    # First check the HTML directory for date-based files that match the lottery type
    if os.path.exists(html_dir):
        for filename in os.listdir(html_dir):
            if screenshot.lottery_type.lower().replace(' ', '_') in filename.lower():
                matching_files.append(os.path.join(html_dir, filename))
    
    # Then check the main screenshots directory
    if os.path.exists(screenshots_dir):
        for filename in os.listdir(screenshots_dir):
            if screenshot.lottery_type.lower().replace(' ', '_') in filename.lower():
                matching_files.append(os.path.join(screenshots_dir, filename))
    
    # If we found matching files, use the most recent one
    if matching_files and not (screenshot.path and os.path.exists(screenshot.path)):
        # Sort by modification time (most recent first)
        matching_files.sort(key=lambda f: os.path.getmtime(f), reverse=True)
        newest_file = matching_files[0]
        
        # Update the screenshot record with the file path
        if newest_file.endswith('.html'):
            if not screenshot.html_path or not os.path.exists(screenshot.html_path):
                screenshot.html_path = newest_file
                db.session.commit()
                app.logger.info(f"Updated screenshot HTML path to {newest_file}")
        else:
            if not screenshot.path or not os.path.exists(screenshot.path):
                screenshot.path = newest_file
                db.session.commit()
                app.logger.info(f"Updated screenshot path to {newest_file}")
    
    # Always try to generate a fresh PNG from HTML for consistent results
    if screenshot.html_path and os.path.isfile(screenshot.html_path):
        app.logger.info(f"HTML file exists at {screenshot.html_path} ({os.path.getsize(screenshot.html_path)} bytes)")
        try:
            app.logger.info(f"Using puppeteer_service.generate_png_from_html for {screenshot.html_path}")
            
            # Import the function from our puppeteer_service module
            from puppeteer_service import generate_png_from_html
            
            # Generate the PNG image
            success, temp_screenshot_path, error_message = generate_png_from_html(
                html_path=screenshot.html_path
            )
            
            # Check if generation was successful
            if success and temp_screenshot_path and os.path.exists(temp_screenshot_path):
                app.logger.info(f"Successfully generated PNG at {temp_screenshot_path} ({os.path.getsize(temp_screenshot_path)} bytes)")
                attempts.append(f"Successfully generated PNG: {os.path.getsize(temp_screenshot_path)} bytes")
                
                # Return the generated file
                return send_file(
                    temp_screenshot_path,
                    mimetype='image/png',
                    as_attachment=force_download,
                    download_name=f"{screenshot.lottery_type.replace(' ', '_')}.png"
                )
            else:
