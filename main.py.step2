from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, login_required, current_user
import os
import logging
import json

# Set up logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Create the Flask application
app = Flask(__name__)

# Configure the app
app.config['SECRET_KEY'] = os.environ.get('SESSION_SECRET', 'lottery-scraper-default-secret')
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///lottery.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SQLALCHEMY_ENGINE_OPTIONS'] = {
    "pool_recycle": 300,
    "pool_pre_ping": True
}

# Initialize database
db = SQLAlchemy(app)

# Initialize Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'
login_manager.login_message = 'Please log in to access this page'
login_manager.login_message_category = 'info'

# Import models after database initialization
from models import Screenshot, LotteryResult, ScheduleConfig, User

# User loader for Flask-Login
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Create database tables if they don't exist
with app.app_context():
    db.create_all()

# Import data utilities
from data_aggregator import validate_and_correct_known_draws

# Run validation to correct any known draw issues
with app.app_context():
    try:
        corrected_count = validate_and_correct_known_draws()
        if corrected_count > 0:
            logger.info(f"Corrected {corrected_count} draws with known good data")
    except Exception as e:
        logger.error(f"Error validating known draws: {str(e)}")

# Routes
@app.route('/')
def index():
    """Home page showing lottery results and ticket scanning feature"""
    latest_results = LotteryResult.query.order_by(LotteryResult.draw_date.desc()).limit(10).all()
    return render_template('index.html', results=latest_results)

@app.route('/results')
def results():
    """Page showing all lottery results"""
    lottery_type = request.args.get('lottery_type', None)
    page = request.args.get('page', 1, type=int)
    per_page = 20
    
    # Create a query
    query = LotteryResult.query
    
    # Filter by lottery type if specified
    if lottery_type:
        query = query.filter_by(lottery_type=lottery_type)
    
    # Get results with pagination
    paginated_results = query.order_by(LotteryResult.draw_date.desc()).paginate(
        page=page, per_page=per_page, error_out=False
    )
    
    return render_template('results.html', results=paginated_results, lottery_type=lottery_type)

@app.route('/ticket-scanner')
def ticket_scanner():
    """Page for scanning lottery tickets"""
    return render_template('ticket_scanner_new.html')

# Run the application
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)